on:
  workflow_dispatch:

name: Build binaries and publish package
jobs:
  check:
    name: Check if package already exists
    runs-on: ubuntu-latest
    outputs:
      version: v${{ steps.get_version.outputs.version }}
      package_exists: ${{ steps.package_exists.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: echo "version=$(npm pkg get version | sed 's/"//g')" >> $GITHUB_OUTPUT

      - name: Get package name
        id: get_name
        run: echo "name=$(npm pkg get name | sed 's/"//g')" >> $GITHUB_OUTPUT

      - name: Check package
        id: package_exists
        run: |
          echo "exists=no" >> $GITHUB_OUTPUT
          if [ $(npm view ${{ steps.get_name.outputs.name }}@${{ steps.get_version.outputs.version }} version 2> /dev/null) ]; then
            echo "exists=yes" >> $GITHUB_OUTPUT
          else
            echo "exists=no" >> $GITHUB_OUTPUT
          fi

      - name: Log outputs
        run: |
          echo "Release version: ${{ steps.get_version.outputs.version }}"
          echo "Package exists:  ${{ steps.package_exists.outputs.exists }}"

  build:
    needs: [check]
    name: Build
    strategy:
      matrix:
        build: [
          {runner: macos-latest,  os: darwin, branch: '',    arch: x64,     node: 18.20.2, shell: bash},
          {runner: ubuntu-latest, os: linux,  branch: '',    arch: x64,     node: 18.20.2, shell: bash},
          {runner: ubuntu-latest, os: alpine, branch: v3.18, arch: aarch64, node: 18.20.2, shell: 'alpine.sh {0}'},
          {runner: ubuntu-latest, os: alpine, branch: v3.18, arch: x86_64,  node: 18.20.2, shell: 'alpine.sh {0}'},
          {runner: macos-latest,  os: darwin, branch: '',    arch: x64,     node: 20.12.2, shell: bash},
          {runner: ubuntu-latest, os: linux,  branch: '',    arch: x64,     node: 20.12.2, shell: bash},
          {runner: ubuntu-latest, os: alpine, branch: edge,  arch: aarch64, node: 20.12.2, shell: 'alpine.sh {0}'},
          {runner: ubuntu-latest, os: alpine, branch: edge,  arch: x86_64,  node: 20.12.2, shell: 'alpine.sh {0}'},
        ]
    runs-on: ${{ matrix.build.runner }}
    if: needs.check.outputs.package_exists == 'no'
    defaults:
      run:
        shell: ${{ matrix.build.shell }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup latest Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          branch: ${{ matrix.build.branch }}
          arch: ${{ matrix.build.arch }}
          packages: >
            c-ares-dev
            zlib-dev
            openssl-dev
            nghttp2-dev 
            icu-dev
            brotli-dev
            make
            build-base
            python3
            nodejs
            npm
        if: matrix.build.os == 'alpine'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.build.node }}
        if: matrix.build.os != 'alpine'

      - name: get python version
        id: python
        run: |
          echo "major=$(python3 -V | awk '{split($2,a,"."); print a[1]}')" >> $GITHUB_OUTPUT
          echo "minor=$(python3 -V | awk '{split($2,a,"."); print a[2]}')" >> $GITHUB_OUTPUT
          echo "patch=$(python3 -V | awk '{split($2,a,"."); print a[3]}')" >> $GITHUB_OUTPUT

      - name: fix python3.12 missing distutils
        env:
          PY_MAJOR: ${{ steps.python.outputs.major }}
          PY_MINOR: ${{ steps.python.outputs.minor }}
          PY_PATCH: ${{ steps.python.outputs.patch }}
        run: python3 -m pip install packaging setuptools
        if: ${{ fromJSON(env.PY_MAJOR) >= 3 && fromJSON(env.PY_MINOR) >= 12 }}

      - name: Install Node dependencies
        run: npm install --ignore-scripts

      - name: Build package for ${{ matrix.build.os }}-${{ matrix.build.arch }}
        run: npm run prebuild -- -t ${{ matrix.build.node }}
        env:
          MAKEFLAGS: -j4

      - name: Upload prebuild as artifact
        uses: actions/upload-artifact@v3
        with:
          path: prebuilds/
          retention-days: 1

  release:
    name: Publish package
    runs-on: ubuntu-latest
    needs: [check, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifact
          path: prebuilds

      - name: Publish to npm
        uses: JS-DevTools/npm-publish@v2
        with:
          access: public
          token: ${{ secrets.NPM_TOKEN }}
          dry-run: false
