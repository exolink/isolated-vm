on:
  workflow_dispatch:

name: Build binaries and create release
jobs:
  check:
    name: Check if release or package already exists
    runs-on: ubuntu-latest
    outputs:
      version: v${{ steps.get_version.outputs.version }}
      release_exists: ${{ steps.release_exists.outputs.exists }}
      package_exists: ${{ steps.package_exists.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: echo "version=$(npm pkg get version | sed 's/"//g')" >> $GITHUB_OUTPUT

      - name: Get package name
        id: get_name
        run: echo "name=$(npm pkg get name | sed 's/"//g')" >> $GITHUB_OUTPUT

      - name: Check release
        id: release_exists
        run: |
          if [ $(git tag -l "v${{ steps.get_version.outputs.version }}") ]; then
            echo "exists=yes" >> $GITHUB_OUTPUT
          else
            echo "exists=no" >> $GITHUB_OUTPUT
          fi

      - name: Check package
        id: package_exists
        run: |
          npm view ${{ steps.get_name.outputs.name }}@${{ steps.get_version.outputs.version }} version &> /dev/null
          if [ $? -eq 0 ]; then
            echo "exists=yes" >> $GITHUB_OUTPUT
          else
            echo "exists=no" >> $GITHUB_OUTPUT
          fi          

      - name: Log outputs
        run: |
          echo "Release version: ${{ steps.get_version.outputs.version }}"
          echo "Release exists:  ${{ steps.release_exists.outputs.exists }}"
          echo "Package exists:  ${{ steps.package_exists.outputs.exists }}"

  build:
    needs: [check]
    name: Build
    strategy:
      matrix:
#        os: [macos-latest, ubuntu-latest, self-hosted]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
#    if: needs.check.outputs.release_exists == 'no' && needs.check.outputs.package_exists == 'no'
    if: needs.check.outputs.release_exists == 'no'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install build environment
        run: sudo apt-get install python3 make g++
        if: matrix.os == 'self-hosted'

      - name: Install Node dependencies
        run: npm install --ignore-scripts

      - name: Build package for ${{ matrix.os }}
        run: npm run prebuild
        env:
          MAKEFLAGS: -j4

      - name: Upload prebuild as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: ./prebuilds
          retention-days: 1

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: prebuilds

#      - name: Get version
#        id: get_version
#        run: echo "VERSION=$(npm pkg get version | sed 's/"//g')" >> $GITHUB_OUTPUT

      - name: Compress builds
        run: |
          tar --create --verbose --file="./${{ needs.check.outputs.version }}-linux-x86.tar" --directory "prebuilds/ubuntu-latest" .
#          tar --create --verbose --file="./${{ steps.get_version.outputs.VERSION }}-osx-x86.tar" --directory "prebuilds/macos-latest" .
#          tar --create --verbose --file="./${{ steps.get_version.outputs.VERSION }}-arm64.tar" --directory "prebuilds/self-hosted" .

      - run: find .

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ${{ needs.check.outputs.version }}-linux-x86.tar
#            v${{ steps.get_version.outputs.VERSION }}-osx-x86.tar
#            v${{ steps.get_version.outputs.VERSION }}-arm64.tar
#
#      - name: Publish to npm
#        uses: JS-DevTools/npm-publish@v2
#        with:
#          access: public
#          token: ${{ secrets.NPM_TOKEN }}
#          dry-run: false
